%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 3f6a93b863ca8314695b382c0c8c2b3d, type: 3}
  m_Name: L1090_NetworkVariable
  m_EditorClassIdentifier: 
  lectureCode: 1090
  lectureSectionNumber: 9
  lectureName: NetworkVariable
  lectureTitle: Network Variable
  frequentlyAskedQuestionListSO: {fileID: 11400000, guid: 2e3b2b1aa4fb3d94f953e411c370f529,
    type: 2}
  quizListSO: {fileID: 11400000, guid: 38a2d2e51d4414446ad8fe60dc27d139, type: 2}
  exerciseListSO: {fileID: 11400000, guid: 9f5628c5b75a4704a9976c95470b212b, type: 2}
  lectureDescription: "<h1>Lecture Summary: Network Variables</h1><p>In this lecture,
    we tackled <strong>synchronizing </strong>the current player type across the
    server and clients using Network Variables. These are a powerful feature in Netcode
    for GameObjects that automatically syncs data between the server and all connected
    clients.</p><p>We replaced the local currentPlayablePlayerType variable in the
    GameManager with a <strong>NetworkVariable&lt;PlayerType&gt;</strong>. By default,
    only the <strong>server </strong>can <strong>write </strong>to it, and all <strong>clients
    </strong>can <strong>read </strong>it\u2014exactly what we needed. Network Variables
    also have an <strong>OnValueChanged </strong>delegate, which we used to trigger
    the OnCurrentPlayerTypeChanged event whenever the player type updates.</p><p>With
    this setup, all clients are now notified of turn changes, and the PlayerUI updates
    correctly on both the server and client. The game now fully synchronizes player
    turns across the network\u2014awesome progress!</p>\r\n"
